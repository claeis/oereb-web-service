plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'maven'
    id 'org.asciidoctor.jvm.convert' version '3.1.0'
    id 'org.asciidoctor.jvm.pdf' version '3.1.0'
}

apply plugin: 'io.spring.dependency-management'

group 'ch.ehi.oereb'

version '2.0.2'+System.getProperty('release','-SNAPSHOT')

sourceCompatibility = "11"
targetCompatibility = "11"

compileJava {
    options.compilerArgs.addAll(['--release', '11'])
    options.encoding = 'US-ASCII'
}

// to get the latest SNAPSHOT uncomment the following lines
//configurations.all {
    // check for updates every build
    // resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
//}

configurations {
    jaxb
    deployerJars
    tests
}

dependencies {
    //compile group: 'org.slf4j', name: 'slf4j-api', version: "1.7.25"
    //compile group: 'org.slf4j', name: 'slf4j-simple', version: "1.7.25"
    testCompile group: 'ch.interlis', name: 'ili2pg', version: '4.7.0'
    testCompile group: 'ch.interlis', name: 'ili2c-tool', version: '5.2.5'
    testImplementation group: 'ch.ehi', name: 'ehibasics', version: '1.4.1'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.xmlunit', name: 'xmlunit-matchers', version: '2.6.4'
    testCompile group: 'org.xmlunit', name: 'xmlunit-core', version: '2.6.4'
    testCompile group: 'org.xmlunit', name: 'xmlunit-placeholders', version: '2.6.4'
    
    compile group: 'com.vividsolutions', name: 'jts-core', version: '1.14.0'
    compile 'commons-io:commons-io:2.6'
    implementation ('io.github.sogis:pdf4oereb:2.0.116') {
    //implementation ('io.github.sogis:app:2.0.47') {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
    
    //compile ('ch.so.agi.oereb:pdf4oereb:1.0.+') {
    //	exclude group: 'org.slf4j', module: 'slf4j-simple'
    //}
    compile group: 'org.postgresql', name: 'postgresql'
    compile	group: 'javax.xml.bind',name:'jaxb-api', version:'2.3.1'
    compile	group: 'com.sun.xml.bind',name:'jaxb-core', version:'2.3.0.1'
    compile	group: 'com.sun.xml.bind',name:'jaxb-impl', version:'2.3.2'
    compile group: 'javax.activation', name: 'activation', version: '1.1.1'
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework:spring-oxm:5.3.21")
    compile('org.springframework.boot:spring-boot-starter-test')
    jaxb (
        'com.sun.xml.bind:jaxb-xjc:2.3.1',
        'javax.xml.bind:jaxb-api:2.3.1',
        'com.sun.xml.bind:jaxb-core:2.3.0.1',
        'com.sun.xml.bind:jaxb-impl:2.3.2',
        'javax.activation:activation:1.1.1'
    )
    deployerJars "org.apache.maven.wagon:wagon-ftp:3.3.3"
    deployerJars "org.apache.maven.wagon:wagon-ssh:3.3.3"
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "http://jars.interlis.ch"
    }
}

def generatedXjcSources = "$buildDir/xjc/java"

Properties properties = new Properties()
File propFile=project.rootProject.file('user.properties')
if(propFile.exists()){
    properties.load(propFile.newDataInputStream())
}
def git = System.getProperty('git',properties.get('git','git'))
def repos_pwd = System.getProperty('repos_pwd',properties.get('repos_pwd','repos_pwd'))
def repos_usr = System.getProperty('repos_usr',properties.get('repos_usr','repos_usr'))
def repos_url = System.getProperty('repos_url',properties.get('repos_url','repos_url'))
def spring_config_location = System.getProperty('spring_config_location','file:./')

def generatedResources = "$buildDir/generated-resources/main"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine git, 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

ext {
    buildNumber = getGitHash()
}

sourceSets {
    main {
        //output.dir(generatedResources, builtBy: 'generateMyResources')
        java {
            srcDirs = ['src/main/java',"$generatedXjcSources"]
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

task generateMyResources {
    doLast {
        def versionProps = new Properties()
        versionProps.setProperty('version', "$project.version")
        versionProps.setProperty('versionCommit', getGitHash())
        def versionPropsFile = new File(generatedResources,"ch/ehi/oereb/webservice/Version.properties")
        versionPropsFile.getParentFile().mkdirs();
        versionProps.store(versionPropsFile.newWriter(), null);
    }
}
task jaxb {
    System.setProperty('javax.xml.accessExternalSchema', 'all')
    inputs.files fileTree(dir: 'src/main/xsd', include: ['*.xsd'])
    inputs.files fileTree(dir: 'src/main/xjb', include: ['*.xjb'])
    outputs.files fileTree(dir: "$generatedXjcSources")
    
    doLast {
        mkdir "$generatedXjcSources"

        ant.taskdef(
            name: 'xjc',
            classname: 'com.sun.tools.xjc.XJCTask',
            classpath: configurations.jaxb.asPath
        )

        ant.xjc(
            destdir: "$generatedXjcSources",
            language: 'XMLSCHEMA',
            extension: true
        ){
            schema(dir: "src/main/xsd", includes: "OeREB/**/*.xsd,geometry/1.0/*.xsd")
            binding(dir: "src/main/xjb", includes: "global.xjb,OeREB.xjb,xmldsig-core-schema.xjb,geometry.xjb")
            //arg(value: '-verbose')
        }
    }
}
compileJava.dependsOn jaxb


jar {
    enabled = true
    archiveClassifier = ''
}

bootJar {
    enabled = true
    classifier = 'boot'
}

asciidoctor {
    sourceDir  file('docs/asciidoc')
    outputDir  file('build/docs')
}

asciidoctorPdf {
    sourceDir  file('docs/asciidoc')
    outputDir  file('build/docs')
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

test{
    systemProperty 'TZ',"Europe/Zurich"
    systemProperty 'spring.config.location', spring_config_location
}

javadoc{
    failOnError = false
    options.addBooleanOption 'Xdoclint:none', true
    //options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
task testsJar(type: Jar) {
    classifier = 'tests'
    //from file('build/test-results/binary')
    from file('build/reports/tests')
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives testsJar
    archives bootJar
    //tests testsJar
}

def githubRepoUrl = 'https://github.com/claeis/oereb-web-service'

def pomConfig = {
    licenses {
        license {
            name "LGPL 2.1"
            url "https://github.com/claeis/oereb-web-service/blob/master/LICENSE"
        }
    }
    developers {
        developer {
            id "claeis"
            name "Claude Eisenhut"
            email "ce@eisenhutinformatik.ch"
        }
    }

    scm {
        url githubRepoUrl
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: repos_url){
                authentication(userName: repos_usr, password: repos_pwd)
            }
        }
    }
}

uploadTests {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: repos_url){
                authentication(userName: repos_usr, password: repos_pwd)
            }
        }
    }
}
